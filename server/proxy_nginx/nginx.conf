worker_processes 1;
 
events { 
    worker_connections 1024;
    #accept_mutex on; # "on" if nginx worker_processes > 1
    use epoll;
}

http {
    log_format upstream_time '$remote_addr "$request" $status $body_bytes_sent '
                             'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /dev/stdout upstream_time;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
 
    # Only retry if there was a communication error, not a timeout
    # on the server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;

    upstream docker-web {
        server web:8080;
        #server unix:/sockets/unicorn.sock fail_timeout=0;

        keepalive 32;
    }
 
    server {
        listen 8080;
 
        location /stub_status {
            stub_status on;
            access_log off;
        }

        location / {
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_buffering off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://docker-web;
            proxy_http_version 1.1;
            proxy_set_header "Connection" "";  # remove close

            proxy_connect_timeout 5s;
            #proxy_send_timeout 10s;
            proxy_read_timeout 5s;
            #send_timeout 10s;
        }
    } 
    
}